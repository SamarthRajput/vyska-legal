// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// pnpm dlx prisma generate       # Generate Prisma Client after schema changes
// pnpm dlx prisma db push        # Push schema changes to DB (dev, non-destructive)
// pnpm dlx prisma migrate dev    # Create & apply migration for schema changes
// pnpm dlx prisma migrate reset  # Reset DB: drop, recreate, reapply migrations (dev only)
// pnpm dlx prisma studio         # Open Prisma GUI to view/manage DB
// pnpm dlx prisma format         # Format schema.prisma
// pnpm dlx prisma db pull        # Pull existing DB schema into prisma file

// pnpm dlx prisma migrate dev --name init
// pnpm run prisma:seed

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(cuid())
  clerkId            String        @unique
  name               String
  email              String        @unique
  role               UserRole      @default(USER)
  profilePicture     String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  blogs              Blog[]
  appointments       Appointment[]
  researchPapers     Research[]    @relation("AdminResearchPapers")
  createdTeamMembers TeamMember[]  @relation("CreatedTeamMembers")

  repliedContacts Contact[] @relation("UserRepliedContacts")
}

enum UserRole {
  USER
  ADMIN
}

model Blog {
  id              String     @id @default(cuid())
  title           String
  content         String
  status          BlogStatus @default(PENDING)
  author          User       @relation(fields: [authorId], references: [id])
  authorId        String
  rejectionReason String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

enum BlogStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float?
  iconUrl     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Research {
  id           String   @id @default(cuid())
  title        String
  description  String?
  content      String?  @db.Text
  fileUrl      String?
  thumbnailUrl String?
  createdBy    User     @relation("AdminResearchPapers", fields: [createdById], references: [id])
  createdById  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AppointmentSlot {
  id          String        @id @default(cuid())
  date        DateTime
  timeSlot    String
  isBooked    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Appointment Appointment[]
}

model Appointment {
  id        String            @id @default(cuid())
  userName  String
  userEmail String
  userPhone String?
  slot      AppointmentSlot   @relation(fields: [slotId], references: [id])
  slotId    String
  status    AppointmentStatus @default(PENDING)
    agenda    String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  User      User?             @relation(fields: [userId], references: [id])
  userId    String?
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model TeamMember {
  id        String   @id @default(cuid())
  name      String
  role      String
  biography String?
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  linkedin  String?
  twitter   String?
  instagram String?
  facebook  String?

  createdBy   User?   @relation("CreatedTeamMembers", fields: [createdById], references: [id])
  createdById String?
}

model Contact {
  id          String  @id @default(cuid())
  name        String
  email       String
  phone       String?
  subject     String
  message     String  @db.Text
  reply       String? @db.Text
  repliedById String?
  repliedBy   User?   @relation("UserRepliedContacts", fields: [repliedById], references: [id])

  status    ContactStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

enum ContactStatus {
  PENDING
  RESOLVED
}
